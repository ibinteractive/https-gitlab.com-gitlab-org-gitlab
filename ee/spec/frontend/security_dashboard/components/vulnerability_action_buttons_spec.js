import { createWrapper, mount } from '@vue/test-utils';
import VulnerabilityActionButtons from 'ee/security_dashboard/components/vulnerability_action_buttons.vue';
import createStore from 'ee/security_dashboard/store';
import { VULNERABILITY_MODAL_ID } from 'ee/vue_shared/security_reports/components/constants';
import { resetStore } from '../helpers';
import mockDataVulnerabilities from '../store/modules/vulnerabilities/data/mock_data_vulnerabilities';

describe('Security Dashboard Action Buttons', () => {
  let store;
  let wrapper;

  const createComponent = ({ ...options }) => {
    return mount(VulnerabilityActionButtons, {
      ...options,
      store,
    });
  };

  beforeEach(() => {
    store = createStore();
  });

  afterEach(() => {
    resetStore(store);
    wrapper.destroy();
  });

  describe('with a fresh vulnerability', () => {
    beforeEach(() => {
      wrapper = createComponent({
        propsData: {
          vulnerability: mockDataVulnerabilities[0],
          canCreateIssue: true,
          canDismissVulnerability: true,
        },
      });

      jest.spyOn(wrapper.vm.$store, 'dispatch').mockReturnValue(Promise.resolve());
    });

    it('should render three buttons in a button group', () => {
      expect(wrapper.findAll('.btn-group .btn')).toHaveLength(3);
    });

    describe('More Info Button', () => {
      let button;

      beforeEach(() => {
        button = wrapper.find('.js-more-info');
      });

      it('should render the More info button', () => {
        expect(button.exists()).toBe(true);
      });

      it('should emit an `setModalData` event and open the modal when clicked', () => {
        button.trigger('click');

        expect(wrapper.vm.$store.dispatch).toHaveBeenCalledWith('vulnerabilities/setModalData', {
          vulnerability: mockDataVulnerabilities[0],
        });
        expect(createWrapper(wrapper.vm.$root).emitted('bv::show::modal')).toEqual([
          [VULNERABILITY_MODAL_ID],
        ]);
      });
    });

    describe('Create Issue Button', () => {
      let button;

      beforeEach(() => {
        button = wrapper.find('.js-create-issue');
      });

      it('should render the create issue button', () => {
        expect(button.exists()).toBe(true);
      });

      it('should emit an `createIssue` event when clicked', () => {
        button.trigger('click');

        expect(wrapper.vm.$store.dispatch).toHaveBeenCalledWith('vulnerabilities/createIssue', {
          vulnerability: mockDataVulnerabilities[0],
          flashError: true,
        });
      });

      describe('with Jira issues for vulnerabilities enabled', () => {
        beforeEach(() => {
          wrapper = createComponent({
            propsData: {
              vulnerability: mockDataVulnerabilities[8],
              canCreateIssue: true,
            },
            provide: {
              glFeatures: { jiraForVulnerabilities: true },
            },
          });
        });

        it('should render the correct tooltip', () => {
          expect(wrapper.find('.js-create-issue').attributes('title')).toBe('Create Jira issue');
        });
      });
    });

    describe('Dismiss Vulnerability Button', () => {
      let button;

      beforeEach(() => {
        button = wrapper.find('.js-dismiss-vulnerability');
      });

      it('should render the dismiss vulnerability button', () => {
        expect(button.exists()).toBe(true);
      });

      it('should emit an `dismissVulnerability` event when clicked', () => {
        button.trigger('click');

        expect(wrapper.vm.$store.dispatch).toHaveBeenCalledWith(
          'vulnerabilities/dismissVulnerability',
          {
            vulnerability: mockDataVulnerabilities[0],
            flashError: true,
          },
        );
      });
    });
  });

  describe('with a vulnerbility that has an issue', () => {
    beforeEach(() => {
      wrapper = createComponent({
        propsData: {
          vulnerability: mockDataVulnerabilities[3],
        },
      });
    });

    it('should only render one button', () => {
      expect(wrapper.findAll('.btn')).toHaveLength(1);
    });

    it('should not render the create issue button', () => {
      expect(wrapper.find('.js-create-issue').exists()).toBe(false);
    });
  });

  describe('with a vulnerability that has been dismissed', () => {
    beforeEach(() => {
      wrapper = createComponent({
        propsData: {
          vulnerability: mockDataVulnerabilities[2],
          canDismissVulnerability: true,
          isDismissed: true,
        },
      });
    });

    it('should render two buttons in a button group', () => {
      expect(wrapper.findAll('.btn-group .btn')).toHaveLength(2);
    });

    it('should not render the dismiss vulnerability button', () => {
      expect(wrapper.find('.js-dismiss-vulnerability').exists()).toBe(false);
    });

    it('should render the undo dismiss button', () => {
      expect(wrapper.find('.js-undo-dismiss').exists()).toBe(true);
    });
  });
});
